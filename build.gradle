plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'maven-publish'
}

def version = 1.1

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/SkyCite/TrashPlugin")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'fr.tetemh'
            artifactId = 'trashplugin'
            version = "${version}"

            from(components.java)
        }
    }
}

group = 'fr.tetemh'
version = "${version}"

apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
jar.getArchiveFileName().set("${project.name}.jar")
libsDirName = "${jarOutput}"

repositories {
    mavenCentral()
    mavenLocal ()
    maven { url "https://arcanearts.jfrog.io/artifactory/archives" }
    maven {
        url = 'https://jitpack.io'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
        url = 'https://oss.sonatype.org/content/repositories/central'
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.jetbrains:annotations:20.1.0'

    // Spigot
    compileOnly("io.papermc.paper:paper-api:1.20.2-R0.1-SNAPSHOT")

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
}

sourceSets {
    configurations.compileOnly.setCanBeResolved(true)
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

artifacts {
    archives shadowJar
}